/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Mux_8x1_NBits #(
    parameter Bits = 2
)
(
    input [2:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            3'h0: out = in_0;
            3'h1: out = in_1;
            3'h2: out = in_2;
            3'h3: out = in_3;
            3'h4: out = in_4;
            3'h5: out = in_5;
            3'h6: out = in_6;
            3'h7: out = in_7;
            default:
                out = 'h0;
        endcase
    end
endmodule


module Demux4
#(
    parameter Default = 0 
)
(
    output out_0,
    output out_1,
    output out_2,
    output out_3,
    output out_4,
    output out_5,
    output out_6,
    output out_7,
    output out_8,
    output out_9,
    output out_10,
    output out_11,
    output out_12,
    output out_13,
    output out_14,
    output out_15,
    input [3:0] sel,
    input in
);
    assign out_0 = (sel == 4'h0)? in : Default;
    assign out_1 = (sel == 4'h1)? in : Default;
    assign out_2 = (sel == 4'h2)? in : Default;
    assign out_3 = (sel == 4'h3)? in : Default;
    assign out_4 = (sel == 4'h4)? in : Default;
    assign out_5 = (sel == 4'h5)? in : Default;
    assign out_6 = (sel == 4'h6)? in : Default;
    assign out_7 = (sel == 4'h7)? in : Default;
    assign out_8 = (sel == 4'h8)? in : Default;
    assign out_9 = (sel == 4'h9)? in : Default;
    assign out_10 = (sel == 4'ha)? in : Default;
    assign out_11 = (sel == 4'hb)? in : Default;
    assign out_12 = (sel == 4'hc)? in : Default;
    assign out_13 = (sel == 4'hd)? in : Default;
    assign out_14 = (sel == 4'he)? in : Default;
    assign out_15 = (sel == 4'hf)? in : Default;
endmodule

module Register16
  (
    input [15:0]D,
    input C,
    input en,
    input rst,
    output [15:0]Q
  );

  reg [15:0] state = 'h0;

  assign Q = state;

  always @ (posedge C)
  begin
    if(rst)
    begin
      state <= 16'h0;
    end
    if (en)
      state <= D;
  end
endmodule


module register_16bit (
  input [15:0] D,
  input C,
  input en,
  input rst,
  output [15:0] Q
);
  // Register16
  Register16 Register16_i0 (
    .D( D ),
    .C( C ),
    .en( en ),
    .rst( rst ),
    .Q( Q )
  );
endmodule

module Mux_16x1_NBits #(
    parameter Bits = 2
)
(
    input [3:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    input [(Bits - 1):0] in_8,
    input [(Bits - 1):0] in_9,
    input [(Bits - 1):0] in_10,
    input [(Bits - 1):0] in_11,
    input [(Bits - 1):0] in_12,
    input [(Bits - 1):0] in_13,
    input [(Bits - 1):0] in_14,
    input [(Bits - 1):0] in_15,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            4'h0: out = in_0;
            4'h1: out = in_1;
            4'h2: out = in_2;
            4'h3: out = in_3;
            4'h4: out = in_4;
            4'h5: out = in_5;
            4'h6: out = in_6;
            4'h7: out = in_7;
            4'h8: out = in_8;
            4'h9: out = in_9;
            4'ha: out = in_10;
            4'hb: out = in_11;
            4'hc: out = in_12;
            4'hd: out = in_13;
            4'he: out = in_14;
            4'hf: out = in_15;
            default:
                out = 'h0;
        endcase
    end
endmodule


module RegisterBlock (
  input [15:0] DataIn,
  input WE,
  input clk,
  input [3:0] src,
  input [3:0] Dest,
  input rst,
  output [15:0] RDest,
  output [15:0] Rsrc
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire [15:0] s16;
  wire [15:0] s17;
  wire [15:0] s18;
  wire [15:0] s19;
  wire [15:0] s20;
  wire [15:0] s21;
  wire [15:0] s22;
  wire [15:0] s23;
  wire [15:0] s24;
  wire [15:0] s25;
  wire [15:0] s26;
  wire [15:0] s27;
  wire [15:0] s28;
  wire [15:0] s29;
  wire [15:0] s30;
  wire [15:0] s31;
  Demux4 #(
    .Default(0)
  )
  Demux4_i0 (
    .sel( Dest ),
    .in( WE ),
    .out_0( s0 ),
    .out_1( s1 ),
    .out_2( s2 ),
    .out_3( s3 ),
    .out_4( s4 ),
    .out_5( s5 ),
    .out_6( s6 ),
    .out_7( s7 ),
    .out_8( s8 ),
    .out_9( s9 ),
    .out_10( s10 ),
    .out_11( s11 ),
    .out_12( s12 ),
    .out_13( s13 ),
    .out_14( s14 ),
    .out_15( s15 )
  );
  // R0
  register_16bit register_16bit_i1 (
    .D( DataIn ),
    .C( clk ),
    .en( s0 ),
    .rst( rst ),
    .Q( s16 )
  );
  // R1
  register_16bit register_16bit_i2 (
    .D( DataIn ),
    .C( clk ),
    .en( s1 ),
    .rst( rst ),
    .Q( s17 )
  );
  // R2
  register_16bit register_16bit_i3 (
    .D( DataIn ),
    .C( clk ),
    .en( s2 ),
    .rst( rst ),
    .Q( s18 )
  );
  // R3
  register_16bit register_16bit_i4 (
    .D( DataIn ),
    .C( clk ),
    .en( s3 ),
    .rst( rst ),
    .Q( s19 )
  );
  // R4
  register_16bit register_16bit_i5 (
    .D( DataIn ),
    .C( clk ),
    .en( s4 ),
    .rst( rst ),
    .Q( s20 )
  );
  // R5
  register_16bit register_16bit_i6 (
    .D( DataIn ),
    .C( clk ),
    .en( s5 ),
    .rst( rst ),
    .Q( s21 )
  );
  // R6
  register_16bit register_16bit_i7 (
    .D( DataIn ),
    .C( clk ),
    .en( s6 ),
    .rst( rst ),
    .Q( s22 )
  );
  // R7
  register_16bit register_16bit_i8 (
    .D( DataIn ),
    .C( clk ),
    .en( s7 ),
    .rst( rst ),
    .Q( s23 )
  );
  // R8
  register_16bit register_16bit_i9 (
    .D( DataIn ),
    .C( clk ),
    .en( s8 ),
    .rst( rst ),
    .Q( s24 )
  );
  // R9
  register_16bit register_16bit_i10 (
    .D( DataIn ),
    .C( clk ),
    .en( s9 ),
    .rst( rst ),
    .Q( s25 )
  );
  // R10
  register_16bit register_16bit_i11 (
    .D( DataIn ),
    .C( clk ),
    .en( s10 ),
    .rst( rst ),
    .Q( s26 )
  );
  // R11
  register_16bit register_16bit_i12 (
    .D( DataIn ),
    .C( clk ),
    .en( s11 ),
    .rst( rst ),
    .Q( s27 )
  );
  // R12
  register_16bit register_16bit_i13 (
    .D( DataIn ),
    .C( clk ),
    .en( s12 ),
    .rst( rst ),
    .Q( s28 )
  );
  // BranchPointer
  register_16bit register_16bit_i14 (
    .D( DataIn ),
    .C( clk ),
    .en( s13 ),
    .rst( rst ),
    .Q( s29 )
  );
  // StackPointer
  register_16bit register_16bit_i15 (
    .D( DataIn ),
    .C( clk ),
    .en( s14 ),
    .rst( rst ),
    .Q( s30 )
  );
  // ReturnAddr
  register_16bit register_16bit_i16 (
    .D( DataIn ),
    .C( clk ),
    .en( s15 ),
    .rst( rst ),
    .Q( s31 )
  );
  Mux_16x1_NBits #(
    .Bits(16)
  )
  Mux_16x1_NBits_i17 (
    .sel( Dest ),
    .in_0( s16 ),
    .in_1( s17 ),
    .in_2( s18 ),
    .in_3( s19 ),
    .in_4( s20 ),
    .in_5( s21 ),
    .in_6( s22 ),
    .in_7( s23 ),
    .in_8( s24 ),
    .in_9( s25 ),
    .in_10( s26 ),
    .in_11( s27 ),
    .in_12( s28 ),
    .in_13( s29 ),
    .in_14( s30 ),
    .in_15( s31 ),
    .out( RDest )
  );
  Mux_16x1_NBits #(
    .Bits(16)
  )
  Mux_16x1_NBits_i18 (
    .sel( src ),
    .in_0( s16 ),
    .in_1( s17 ),
    .in_2( s18 ),
    .in_3( s19 ),
    .in_4( s20 ),
    .in_5( s21 ),
    .in_6( s22 ),
    .in_7( s23 ),
    .in_8( s24 ),
    .in_9( s25 ),
    .in_10( s26 ),
    .in_11( s27 ),
    .in_12( s28 ),
    .in_13( s29 ),
    .in_14( s30 ),
    .in_15( s31 ),
    .out( Rsrc )
  );
endmodule
module DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input D,
   input C,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule

///////////////////////////////////////////////////////////////////////////////
// Description: SPI (Serial Peripheral Interface) Master
//              Creates master based on input configuration.
//              Sends a byte one bit at a time on MOSI
//              Will also receive byte data one bit at a time on MISO.
//              Any data on input byte will be shipped out on MOSI.
//
//              To kick-off transaction, user must pulse i_TX_DV.
//              This module supports multi-byte transmissions by pulsing
//              i_TX_DV and loading up i_TX_Byte when o_TX_Ready is high.
//
//              This module is only responsible for controlling Clk, MOSI, 
//              and MISO.  If the SPI peripheral requires a chip-select, 
//              this must be done at a higher level.
//
// Note:        i_Clk must be at least 2x faster than i_SPI_Clk
//
// Parameters:  SPI_MODE, can be 0, 1, 2, or 3.  See above.
//              Can be configured in one of 4 modes:
//              Mode | Clock Polarity (CPOL/CKP) | Clock Phase (CPHA)
//               0   |             0             |        0
//               1   |             0             |        1
//               2   |             1             |        0
//               3   |             1             |        1
//              More: https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus#Mode_numbers
//              CLKS_PER_HALF_BIT - Sets frequency of o_SPI_Clk.  o_SPI_Clk is
//              derived from i_Clk.  Set to integer number of clocks for each
//              half-bit of SPI data.  E.g. 100 MHz i_Clk, CLKS_PER_HALF_BIT = 2
//              would create o_SPI_CLK of 25 MHz.  Must be >= 2
//
///////////////////////////////////////////////////////////////////////////////

module SPI_Master
  #(parameter SPI_MODE = 0,
    parameter CLKS_PER_HALF_BIT = 2)
  (
   // Control/Data Signals,
   input        i_Rst_L,     // FPGA Reset
   input        i_Clk,       // FPGA Clock
   
   // TX (MOSI) Signals
   input [7:0]  i_TX_Byte,        // Byte to transmit on MOSI
   input        i_TX_DV,          // Data Valid Pulse with i_TX_Byte
   output reg   o_TX_Ready,       // Transmit Ready for next byte
   
   // RX (MISO) Signals
   output reg       o_RX_DV,     // Data Valid pulse (1 clock cycle)
   output reg [7:0] o_RX_Byte,   // Byte received on MISO

   // SPI Interface
   output reg o_SPI_Clk,
   input      i_SPI_MISO,
   output reg o_SPI_MOSI
   );

  // SPI Interface (All Runs at SPI Clock Domain)
  wire w_CPOL;     // Clock polarity
  wire w_CPHA;     // Clock phase

  reg [$clog2(CLKS_PER_HALF_BIT*2)-1:0] r_SPI_Clk_Count;
  reg r_SPI_Clk;
  reg [4:0] r_SPI_Clk_Edges;
  reg r_Leading_Edge;
  reg r_Trailing_Edge;
  reg       r_TX_DV;
  reg [7:0] r_TX_Byte;

  reg [2:0] r_RX_Bit_Count;
  reg [2:0] r_TX_Bit_Count;

  // CPOL: Clock Polarity
  // CPOL=0 means clock idles at 0, leading edge is rising edge.
  // CPOL=1 means clock idles at 1, leading edge is falling edge.
  assign w_CPOL  = (SPI_MODE == 2) | (SPI_MODE == 3);

  // CPHA: Clock Phase
  // CPHA=0 means the "out" side changes the data on trailing edge of clock
  //              the "in" side captures data on leading edge of clock
  // CPHA=1 means the "out" side changes the data on leading edge of clock
  //              the "in" side captures data on the trailing edge of clock
  assign w_CPHA  = (SPI_MODE == 1) | (SPI_MODE == 3);



  // Purpose: Generate SPI Clock correct number of times when DV pulse comes
  always @(posedge i_Clk or negedge i_Rst_L)
  begin
    if (~i_Rst_L)
    begin
      o_TX_Ready      <= 1'b0;
      r_SPI_Clk_Edges <= 0;
      r_Leading_Edge  <= 1'b0;
      r_Trailing_Edge <= 1'b0;
      r_SPI_Clk       <= w_CPOL; // assign default state to idle state
      r_SPI_Clk_Count <= 0;
    end
    else
    begin

      // Default assignments
      r_Leading_Edge  <= 1'b0;
      r_Trailing_Edge <= 1'b0;
      
      if (i_TX_DV)
      begin
        o_TX_Ready      <= 1'b0;
        r_SPI_Clk_Edges <= 16;  // Total # edges in one byte ALWAYS 16
      end
      else if (r_SPI_Clk_Edges > 0)
      begin
        o_TX_Ready <= 1'b0;
        
        if (r_SPI_Clk_Count == CLKS_PER_HALF_BIT*2-1)
        begin
          r_SPI_Clk_Edges <= r_SPI_Clk_Edges - 1'b1;
          r_Trailing_Edge <= 1'b1;
          r_SPI_Clk_Count <= 0;
          r_SPI_Clk       <= ~r_SPI_Clk;
        end
        else if (r_SPI_Clk_Count == CLKS_PER_HALF_BIT-1)
        begin
          r_SPI_Clk_Edges <= r_SPI_Clk_Edges - 1'b1;
          r_Leading_Edge  <= 1'b1;
          r_SPI_Clk_Count <= r_SPI_Clk_Count + 1'b1;
          r_SPI_Clk       <= ~r_SPI_Clk;
        end
        else
        begin
          r_SPI_Clk_Count <= r_SPI_Clk_Count + 1'b1;
        end
      end  
      else
      begin
        o_TX_Ready <= 1'b1;
      end
      
      
    end // else: !if(~i_Rst_L)
  end // always @ (posedge i_Clk or negedge i_Rst_L)


  // Purpose: Register i_TX_Byte when Data Valid is pulsed.
  // Keeps local storage of byte in case higher level module changes the data
  always @(posedge i_Clk or negedge i_Rst_L)
  begin
    if (~i_Rst_L)
    begin
      r_TX_Byte <= 8'h00;
      r_TX_DV   <= 1'b0;
    end
    else
      begin
        r_TX_DV <= i_TX_DV; // 1 clock cycle delay
        if (i_TX_DV)
        begin
          r_TX_Byte <= i_TX_Byte;
        end
      end // else: !if(~i_Rst_L)
  end // always @ (posedge i_Clk or negedge i_Rst_L)


  // Purpose: Generate MOSI data
  // Works with both CPHA=0 and CPHA=1
  always @(posedge i_Clk or negedge i_Rst_L)
  begin
    if (~i_Rst_L)
    begin
      o_SPI_MOSI     <= 1'b0;
      r_TX_Bit_Count <= 3'b111; // send MSb first
    end
    else
    begin
      // If ready is high, reset bit counts to default
      if (o_TX_Ready)
      begin
        r_TX_Bit_Count <= 3'b111;
      end
      // Catch the case where we start transaction and CPHA = 0
      else if (r_TX_DV & ~w_CPHA)
      begin
        o_SPI_MOSI     <= r_TX_Byte[3'b111];
        r_TX_Bit_Count <= 3'b110;
      end
      else if ((r_Leading_Edge & w_CPHA) | (r_Trailing_Edge & ~w_CPHA))
      begin
        r_TX_Bit_Count <= r_TX_Bit_Count - 1'b1;
        o_SPI_MOSI     <= r_TX_Byte[r_TX_Bit_Count];
      end
    end
  end


  // Purpose: Read in MISO data.
  always @(posedge i_Clk or negedge i_Rst_L)
  begin
    if (~i_Rst_L)
    begin
      o_RX_Byte      <= 8'h00;
      o_RX_DV        <= 1'b0;
      r_RX_Bit_Count <= 3'b111;
    end
    else
    begin

      // Default Assignments
      o_RX_DV   <= 1'b0;

      if (o_TX_Ready) // Check if ready is high, if so reset bit count to default
      begin
        r_RX_Bit_Count <= 3'b111;
      end
      else if ((r_Leading_Edge & ~w_CPHA) | (r_Trailing_Edge & w_CPHA))
      begin
        o_RX_Byte[r_RX_Bit_Count] <= i_SPI_MISO;  // Sample data
        r_RX_Bit_Count            <= r_RX_Bit_Count - 1'b1;
        if (r_RX_Bit_Count == 3'b000)
        begin
          o_RX_DV   <= 1'b1;   // Byte done, pulse Data Valid
        end
      end
    end
  end
  
  
  // Purpose: Add clock delay to signals for alignment.
  always @(posedge i_Clk or negedge i_Rst_L)
  begin
    if (~i_Rst_L)
    begin
      o_SPI_Clk  <= w_CPOL;
    end
    else
      begin
        o_SPI_Clk <= r_SPI_Clk;
      end // else: !if(~i_Rst_L)
  end // always @ (posedge i_Clk or negedge i_Rst_L)
  

endmodule // SPI_Master


module DIG_Register_BUS #(
    parameter Bits = 1
)
(
    input C,
    input en,
    input [(Bits - 1):0]D,
    output [(Bits - 1):0]Q
);

    reg [(Bits - 1):0] state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module DIG_D_FF_AS_1bit
#(
    parameter Default = 0
)
(
   input Set,
   input D,
   input C,
   input Clr,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q  = ~state;

    always @ (posedge C )
    begin
        if (Set)
            state <= 1'b1;
        else if (Clr)
            state <= 'h0;
        else
            state <= D;
    end

    initial begin
        state = Default;
    end
endmodule

module Mux_2x1
(
    input [0:0] sel,
    input in_0,
    input in_1,
    output reg out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule

module DIG_JK_FF
#(
    parameter Default = 1'b0
)
(
   input J,
   input C,
   input K,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        if (~J & K)
            state <= 1'b0;
         else if (J & ~K)
            state <= 1'b1;
         else if (J & K)
            state <= ~state;
    end

    initial begin
        state = Default;
    end
endmodule


module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module spiden (
  input spi_miso,
  input [15:0] Address,
  input clk,
  input st,
  input [15:0] DataIn,
  input ld,
  input spi_rst,
  output spi_clk,
  output spi_mosi,
  output Busy,
  output [15:0] data_out
);
  wire s0;
  wire [7:0] s1;
  wire Tx_Ready;
  wire Rx_Ready;
  wire [7:0] data_Rx;
  wire load;
  wire [7:0] ramCommand;
  wire Selected;
  wire [15:0] s2;
  wire [7:0] ramAdres_0;
  wire [7:0] ramAdres_1;
  wire [2:0] s3;
  wire [7:0] ramData_1;
  wire [7:0] ramData_0;
  wire [7:0] s4;
  wire [15:0] s5;
  wire store;
  wire s6;
  wire s7;
  wire s8;
  wire busy_N;
  wire s9;
  wire s10;
  wire rstSpi;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire [7:0] s15;
  wire s16;
  wire [7:0] s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire s25;
  wire s26;
  assign s18 = (st & clk);
  assign s20 = (ld & clk);
  // SPI_Master
  SPI_Master SPI_Master_i0 (
    .i_Rst_L( s0 ),
    .i_Clk( clk ),
    .i_TX_Byte( s1 ),
    .i_TX_DV( Tx_Ready ),
    .i_SPI_MISO( spi_miso ),
    .o_TX_Ready( Tx_Ready ),
    .o_RX_DV( Rx_Ready ),
    .o_RX_Byte( data_Rx ),
    .o_SPI_Clk( spi_clk ),
    .o_SPI_MOSI( spi_mosi )
  );
  // RamAddress
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i1 (
    .D( Address ),
    .C( clk ),
    .en( Selected ),
    .Q( s2 )
  );
  // RamData
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i2 (
    .D( DataIn ),
    .C( clk ),
    .en( Selected ),
    .Q( s5 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i3 (
    .Set( s18 ),
    .D( store ),
    .C( 1'b1 ),
    .Clr( s19 ),
    .Q( store )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i4 (
    .Set( s20 ),
    .D( load ),
    .C( 1'b1 ),
    .Clr( s21 ),
    .Q( load )
  );
  assign s21 = (rstSpi & ~ ld);
  assign s19 = (rstSpi & ~ st);
  assign rstSpi = (spi_rst | s10);
  assign ramCommand[0] = load;
  assign ramCommand[1] = 1'b1;
  assign ramCommand[2] = 1'b0;
  assign ramCommand[3] = 1'b0;
  assign ramCommand[4] = 1'b0;
  assign ramCommand[5] = 1'b0;
  assign ramCommand[6] = 1'b0;
  assign ramCommand[7] = 1'b0;
  assign Selected = (load | store);
  assign ramAdres_0 = s2[7:0];
  assign ramAdres_1 = s2[15:8];
  assign ramData_0 = s5[7:0];
  assign ramData_1 = s5[15:8];
  Mux_2x1 Mux_2x1_i5 (
    .sel( rstSpi ),
    .in_0( Selected ),
    .in_1( 1'b0 ),
    .out( s0 )
  );
  assign s9 = (Selected ^ rstSpi);
  assign Busy = (~ rstSpi & Selected);
  Mux_8x1_NBits #(
    .Bits(8)
  )
  Mux_8x1_NBits_i6 (
    .sel( s3 ),
    .in_0( ramCommand ),
    .in_1( ramAdres_1 ),
    .in_2( ramAdres_0 ),
    .in_3( ramData_1 ),
    .in_4( ramData_0 ),
    .in_5( 8'b1000001 ),
    .in_6( 8'b1001110 ),
    .in_7( 8'b1100000 ),
    .out( s4 )
  );
  assign busy_N = (Rx_Ready & ((~ s6 & ~ s7 & s8) | (s12 & load)));
  // Reset
  DIG_JK_FF #(
    .Default(0)
  )
  DIG_JK_FF_i7 (
    .J( busy_N ),
    .C( clk ),
    .K( s9 ),
    .Q( s10 )
  );
  assign s11 = ((s12 | s13) & load);
  DIG_Register_BUS #(
    .Bits(8)
  )
  DIG_Register_BUS_i8 (
    .D( data_Rx ),
    .C( Rx_Ready ),
    .en( s14 ),
    .Q( s15 )
  );
  DIG_Register_BUS #(
    .Bits(8)
  )
  DIG_Register_BUS_i9 (
    .D( data_Rx ),
    .C( Rx_Ready ),
    .en( s16 ),
    .Q( s17 )
  );
  assign s14 = (s12 & load);
  assign s16 = (s13 & load);
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i10 (
    .Set( 1'b0 ),
    .D( s22 ),
    .C( Tx_Ready ),
    .Clr( rstSpi ),
    .Q( s23 ),
    .\~Q ( s22 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i11 (
    .Set( 1'b0 ),
    .D( s24 ),
    .C( s23 ),
    .Clr( rstSpi ),
    .Q( s25 ),
    .\~Q ( s24 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i12 (
    .Set( 1'b0 ),
    .D( s26 ),
    .C( s25 ),
    .Clr( rstSpi ),
    .\~Q ( s26 )
  );
  Mux_2x1_NBits #(
    .Bits(8)
  )
  Mux_2x1_NBits_i13 (
    .sel( s11 ),
    .in_0( s4 ),
    .in_1( 8'b0 ),
    .out( s1 )
  );
  assign data_out[7:0] = s15;
  assign data_out[15:8] = s17;
  assign s3[0] = s22;
  assign s3[1] = s24;
  assign s3[2] = s26;
  assign s6 = s3[0];
  assign s7 = s3[1];
  assign s8 = s3[2];
  assign s12 = (s8 & ~ s7 & ~ s6);
  assign s13 = (s6 & s6 & ~ s8);
endmodule

module CompSigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = $signed(a) > $signed(b);
    assign \= = $signed(a) == $signed(b);
    assign \< = $signed(a) < $signed(b);
endmodule


module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule


module DIG_Counter_Nbit
#(
    parameter Bits = 2
)
(
    output [(Bits-1):0] out,
    output ovf,
    input C,
    input en,
    input clr
);
    reg [(Bits-1):0] count;

    always @ (posedge C) begin
        if (clr)
          count <= 'h0;
        else if (en)
          count <= count + 1'b1;
    end

    assign out = count;
    assign ovf = en? &count : 1'b0;

    initial begin
        count = 'h0;
    end
endmodule


module Mux_8x1
(
    input [2:0] sel,
    input in_0,
    input in_1,
    input in_2,
    input in_3,
    input in_4,
    input in_5,
    input in_6,
    input in_7,
    output reg out
);
    always @ (*) begin
        case (sel)
            3'h0: out = in_0;
            3'h1: out = in_1;
            3'h2: out = in_2;
            3'h3: out = in_3;
            3'h4: out = in_4;
            3'h5: out = in_5;
            3'h6: out = in_6;
            3'h7: out = in_7;
            default:
                out = 'h0;
        endcase
    end
endmodule


module DIG_CounterPreset #(
    parameter Bits = 2,
    parameter maxValue = 4
)
(
    input C,
    input en,
    input clr,
    input dir,
    input [(Bits-1):0] in,
    input ld,
    output [(Bits-1):0] out,
    output ovf
);

    reg [(Bits-1):0] count = 'h0;

    function [(Bits-1):0] maxVal (input [(Bits-1):0] maxv);
        if (maxv == 0)
            maxVal = (1 << Bits) - 1;
        else
            maxVal = maxv;
    endfunction

    assign out = count;
    assign ovf = ((count == maxVal(maxValue) & dir == 1'b0)
                  | (count == 'b0 & dir == 1'b1))? en : 1'b0;

    always @ (posedge C) begin
        if (clr == 1'b1)
            count <= 'h0;
        else if (ld == 1'b1)
            count <= in;
        else if (en == 1'b1) begin
            if (dir == 1'b0) begin
                if (count == maxVal(maxValue))
                    count <= 'h0;
                else
                    count <= count + 1'b1;
            end
            else begin
                if (count == 'h0)
                    count <= maxVal(maxValue);
                else
                    count <= count - 1;
            end
        end
    end
endmodule


module DriverBus#(
    parameter Bits = 2
)
(
    input [(Bits-1):0] in,
    input sel,
    output [(Bits-1):0] out
);
    assign out = (sel == 1'b1)? in : {Bits{1'bz}};
endmodule

module timer (
  input [15:0] dOut,
  input [15:0] Addr,
  input ioW,
  input ioR,
  input C,
  input InterLock,
  input [15:0] timerConfigAddr,
  input [15:0] timerTargetAddr,
  input [15:0] timerResetAddr,
  input [15:0] timerReadAddr,
  input rst,
  output [15:0] TimerOut,
  output \timer?nterrupt 
);
  wire s0;
  wire s1;
  wire s2;
  wire timer_en;
  wire [6:0] s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire [2:0] s11;
  wire s12;
  wire s13;
  wire s14;
  wire [15:0] s15;
  wire [15:0] s16;
  wire [15:0] s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire [2:0] timerPrescaler;
  wire s24;
  wire s25;
  wire s26;
  wire s27;
  wire [15:0] s28;
  wire s29;
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i0 (
    .a( Addr ),
    .b( timerResetAddr ),
    .\= ( s0 )
  );
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i1 (
    .a( Addr ),
    .b( timerTargetAddr ),
    .\= ( s13 )
  );
  CompUnsigned #(
    .Bits(16)
  )
  CompUnsigned_i2 (
    .a( timerReadAddr ),
    .b( dOut ),
    .\= ( s26 )
  );
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i3 (
    .a( Addr ),
    .b( timerConfigAddr ),
    .\= ( s29 )
  );
  assign s1 = (dOut[0] & (s0 & ioW));
  assign s14 = (s13 & ioW);
  assign s25 = (s26 & ioR);
  assign s27 = (s29 & ioW);
  // Reset
  DIG_JK_FF #(
    .Default(0)
  )
  DIG_JK_FF_i4 (
    .J( s1 ),
    .C( C ),
    .K( 1'b1 ),
    .Q( s2 )
  );
  // target
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i5 (
    .D( dOut ),
    .C( C ),
    .en( s14 ),
    .Q( s15 )
  );
  // Config
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i6 (
    .D( dOut ),
    .C( C ),
    .en( s27 ),
    .Q( s28 )
  );
  CompUnsigned #(
    .Bits(16)
  )
  CompUnsigned_i7 (
    .a( s15 ),
    .b( 16'b0 ),
    .\> ( s19 ),
    .\= ( s20 )
  );
  assign timer_en = s28[0];
  assign timerPrescaler = s28[3:1];
  DIG_Counter_Nbit #(
    .Bits(7)
  )
  DIG_Counter_Nbit_i8 (
    .en( timer_en ),
    .C( C ),
    .clr( 1'b0 ),
    .out( s3 )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i9 (
    .sel( s19 ),
    .in_0( 16'b0 ),
    .in_1( s15 ),
    .out( s16 )
  );
  assign s4 = s3[0];
  assign s5 = s3[1];
  assign s6 = s3[2];
  assign s7 = s3[3];
  assign s8 = s3[4];
  assign s9 = s3[5];
  assign s10 = s3[6];
  Mux_8x1 Mux_8x1_i10 (
    .sel( s11 ),
    .in_0( C ),
    .in_1( s4 ),
    .in_2( s5 ),
    .in_3( s6 ),
    .in_4( s7 ),
    .in_5( s8 ),
    .in_6( s9 ),
    .in_7( s10 ),
    .out( s12 )
  );
  CompUnsigned #(
    .Bits(16)
  )
  CompUnsigned_i11 (
    .a( s16 ),
    .b( s17 ),
    .\= ( s18 )
  );
  assign \timer?nterrupt  = (~ InterLock & (~ s20 & s18));
  assign s21 = (~ s20 & ((s18 & s28[4]) | s2));
  DIG_CounterPreset #(
    .Bits(16),
    .maxValue(0)
  )
  DIG_CounterPreset_i12 (
    .en( timer_en ),
    .C( s22 ),
    .dir( 1'b0 ),
    .in( 16'b0 ),
    .ld( s23 ),
    .clr( 1'b0 ),
    .out( s17 )
  );
  Mux_2x1_NBits #(
    .Bits(3)
  )
  Mux_2x1_NBits_i13 (
    .sel( s21 ),
    .in_0( timerPrescaler ),
    .in_1( 3'b0 ),
    .out( s11 )
  );
  assign s24 = (InterLock | ((s18 & ~ s20) & ~ s21));
  DriverBus #(
    .Bits(16)
  )
  DriverBus_i14 (
    .in( s17 ),
    .sel( s25 ),
    .out( TimerOut )
  );
  assign s23 = (s21 | rst);
  Mux_2x1 Mux_2x1_i15 (
    .sel( s24 ),
    .in_0( s12 ),
    .in_1( 1'b1 ),
    .out( s22 )
  );
endmodule
module OpCode
  (
    input clk,
    input rst,
    input instructionInput ,
    input [15:0]ProgramCounter,
    output reg [15:0] opcoder,
    output PcClock,
    output PcShifter
  );

  reg[15:0] instructionRegister=16'h0;
  reg[5:0] CounterRegister=6'h0;
  reg pcClockHold=1'h0;
  reg pcwireshifter;
  reg [4:0] shiftIndex=5'h10;
  reg [15:0]tempReg=16'h0;
  reg state=1'b0;
  reg clockon= 1'b0;
  assign PcClock =pcClockHold;
  assign PcShifter=pcwireshifter;

  always @( posedge clk)
  begin
    if(pcClockHold ==0)
    begin
      if (rst)
      begin
        pcClockHold<=1;
        instructionRegister<= 16'h0;
        CounterRegister<= 6'h0;
        shiftIndex<= 5'h10;
        opcoder<=16'h0;
        state<=1'b0;
        clockon<=0;
        pcwireshifter<=0;
      end
      else
      begin
        if(clockon)
        begin
          pcClockHold<=1;
          clockon<=0;
        end
        else
        begin
          if(state)
          begin

            pcwireshifter<= 0;
            tempReg<= 16'h0;
            tempReg[0]<=instructionInput;
            instructionRegister <= (instructionRegister >> 1) | tempReg<<15;
            CounterRegister <= CounterRegister + 1;
            if(CounterRegister == 6'h10)
            begin
              opcoder<=instructionRegister;
              CounterRegister<=6'h0;
              clockon<= 1;
              state<=1'b0;
              instructionRegister<=16'h0;
            end
          end
          else
          begin
            pcwireshifter<=  ProgramCounter [shiftIndex-1] ;
            shiftIndex<=shiftIndex-1;
            if(shiftIndex==5'h1)
            begin
              shiftIndex<=5'h10;
              state<=1'b1;
            end
          end

        end
      end

    end
    else
    begin
      opcoder<=16'h0;
      pcClockHold<=0;
    end
  end




endmodule
module Register1
  (
    input D,
    input C,
    input en,
    input rst,
    output Q
  );

  reg  state = 'h0;

  assign Q = state;

  always @ (posedge C)
  begin

    if(rst)
    begin
      state <= 1'h0;
    end
    if (en)
      state <= D;

  end
endmodule


module register_1bit (
  input D,
  input C,
  input en,
  input rst,
  output Q
);
  // Register1
  Register1 Register1_i0 (
    .D( D ),
    .C( C ),
    .en( en ),
    .rst( rst ),
    .Q( Q )
  );
endmodule
module Register8
  (
    input [7:0]D,
    input C,
    input en,
    input rst,
    output [7:0]Q
  );

  reg [7:0] state = 'h0;

  assign Q = state;

  always @ (posedge C)
  begin
    if(rst)
    begin
      state <= 8'h0;
    end
    if (en)
      state <= D;


  end
endmodule


module register_8bit (
  input [7:0] D,
  input C,
  input en,
  input rst,
  output [7:0] Q
);
  // Register8
  Register8 Register8_i0 (
    .D( D ),
    .C( C ),
    .en( en ),
    .rst( rst ),
    .Q( Q )
  );
endmodule

module programCounter
  (
    input [15:0] AluIn,
    input clk,
    input rst,
    input absJmp,
    input intr,
    input reti,
    input relJmp,
    output [15:0] Nextpc,
    output [15:0] PC
  );
  reg[15:0] interuptFuncAdr = 16'h2;
  reg[15:0] interruptAdress = 16'b0000000000000000;

  reg[15:0] PCr = 16'b0000000000000000;
  reg [15:0] Nextpcr = 16'b0000000000000001;
  reg isStarted = 1'b0;
  assign Nextpc = Nextpcr;
  assign PC = PCr;




  always @( posedge clk)
  begin
    
      if(!isStarted)
      begin
        PCr <= 16'b0000000000000000;
        Nextpcr<=  16'b0000000000000001;
        isStarted <= 1'b1;
      end
      else
        if(rst)
        begin
          PCr <= 16'b0000000000000000;
          Nextpcr<=  16'b0000000000000001;
        end
        else
        begin
          if(absJmp)
          begin
            PCr <=AluIn;
            Nextpcr<=AluIn+1;
          end
          else if(relJmp)
          begin
            PCr <= PCr + AluIn+1;
            Nextpcr <=Nextpcr+AluIn+1;
          end
          else if(intr)
          begin
            interruptAdress <=PCr;
            PCr <= interuptFuncAdr;
            Nextpcr <=interuptFuncAdr+1;
          end
          else if(reti)
          begin
            PCr <= interruptAdress+1;
            Nextpcr <=interruptAdress+2;
          end

          else
          begin
            PCr <= PCr + 1;
            Nextpcr <= Nextpcr + 1;
          end
        end

  end




endmodule


module singExtend (
  input [15:0] inst, // instruction word
  output [15:0] \4S , // The four bits taken from Rs.
  output [15:0] \8SD , // The eight bits taken from Rs,Rd with sign extension.
  output [15:0] \4D  // The four bits taken from Rd.

);
  wire s0;
  assign \4D [3:0] = inst[7:4];
  assign \4D [15:4] = 12'b0;
  assign \4S [3:0] = inst[3:0];
  assign \4S [15:4] = 12'b0;
  assign s0 = inst[7];
  assign \8SD [6:0] = inst[6:0];
  assign \8SD [7] = s0;
  assign \8SD [8] = s0;
  assign \8SD [9] = s0;
  assign \8SD [10] = s0;
  assign \8SD [11] = s0;
  assign \8SD [12] = s0;
  assign \8SD [13] = s0;
  assign \8SD [14] = s0;
  assign \8SD [15] = s0;
endmodule

module Driver
(
    input in,
    input sel,
    output out
);
    assign out = (sel == 1'b1)? in : 1'bz;
endmodule

module controllogic (
  input A,
  input B,
  input C,
  input D,
  input E,
  input F,
  input G,
  output muxb0,
  output muxb1,
  output muxb2,
  output src2D,
  output aluop0,
  output aluop1,
  output aluop2,
  output aluop3,
  output aluop4,
  output WE,
  output sf,
  output alu2D,
  output iem0,
  output iem1,
  output br0,
  output br1,
  output br2,
  output muxA,
  output ld,
  output st,
  output abs,
  output ioW,
  output ioR,
  output stPC,
  output Reti,
  output randomSel,
  output timerSel
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  assign s6 = ~ A;
  assign s0 = ~ B;
  assign s1 = ~ C;
  assign s2 = ~ D;
  assign s3 = ~ E;
  assign s5 = ~ F;
  assign s4 = ~ G;
  assign muxb0 = ~ (~ (A & s0 & s1 & s2 & s3 & F & s4) & ~ (A & s0 & s1 & s2 & E & F & G) & ~ (A & s0 & s1 & D & s3 & s5 & s4) & ~ (s6 & s1 & D & E & F & s4) & ~ (s6 & B & C & s3 & s5 & s4) & ~ (s6 & s0 & s1 & D & F & s4) & ~ (s6 & s0 & s1 & D & E & s4) & ~ (s6 & s0 & C & s2 & s3 & s4) & ~ (s6 & B & s1 & s2 & s3 & G) & ~ (s6 & C & D & s5 & G) & ~ (s6 & C & s2 & E & G) & ~ (s6 & B & C & E & G) & ~ (s6 & B & C & s2 & E));
  assign muxb1 = ~ (~ (A & s0 & s1 & s2 & E & F & s4) & ~ (s6 & C & s2 & s3 & s5 & G) & ~ (s6 & B & s1 & s2 & s3 & s4) & ~ (A & s0 & s1 & s2 & s3 & G) & ~ (A & s0 & s1 & s2 & s3 & s5) & ~ (s6 & s1 & D & F & G) & ~ (s6 & C & D & s5 & s4) & ~ (s6 & B & C & s5 & G) & ~ (s6 & B & C & F & s4) & ~ (s6 & C & s2 & E & s4) & ~ (s6 & s0 & s1 & D & G) & ~ (s6 & B & D & E) & ~ (s6 & B & C & E));
  assign muxb2 = ~ (~ (s6 & B & C & D & E & F & G) & ~ (s6 & C & s2 & s3 & s5 & s4) & ~ (s6 & B & s2 & s3 & F & G) & ~ (s6 & B & s1 & s3 & F & G) & ~ (A & s0 & s1 & s3 & s5 & s4) & ~ (s6 & s0 & s1 & D & F & s4) & ~ (s6 & s0 & C & D & s5 & G) & ~ (A & s0 & s1 & s2 & F & G) & ~ (s6 & s0 & C & s2 & s3 & s4) & ~ (s6 & s0 & C & s2 & E & G) & ~ (s6 & B & s1 & s2 & s3 & G) & ~ (A & s0 & s1 & s2 & s3 & s4) & ~ (s6 & s1 & D & E & s4));
  assign src2D = ~ (~ (s6 & s0 & s1 & s2 & s3 & s5 & G) & ~ (s6 & B & s1 & D & s3 & F & G) & ~ (s6 & B & s1 & D & E & s5 & G) & ~ (s6 & B & C & s2 & s3 & s5 & G) & ~ (A & s0 & s1 & s2 & s3 & s5 & s4) & ~ (s6 & B & D & E & F & s4) & ~ (s6 & B & C & D & E & F));
  assign aluop0 = ~ (~ (s6 & s0 & s1 & D & E & F & s4) & ~ (s6 & s0 & C & s2 & s3 & s5 & G) & ~ (s6 & s0 & C & s2 & s3 & F & s4) & ~ (s6 & s0 & C & D & E & F & G) & ~ (s6 & s1 & s2 & s3 & F & G) & ~ (s6 & s0 & s1 & E & s5 & G) & ~ (s6 & B & s1 & s2 & F));
  assign aluop1 = ~ (~ (s6 & s0 & C & D & s3 & F & G) & ~ (A & s0 & s1 & s2 & E & s5 & G) & ~ (A & s0 & s1 & s2 & E & F & s4) & ~ (s6 & B & s1 & D & s3 & s4) & ~ (s6 & s0 & C & D & E & s5) & ~ (s6 & B & s1 & D & s3 & s5) & ~ (s6 & B & s1 & s2 & E));
  assign aluop2 = ~ (~ (s6 & B & s1 & D & s3 & F & s4) & ~ (A & s0 & s1 & s2 & E & s5 & G) & ~ (A & s0 & s1 & s2 & E & F & s4) & ~ (s6 & s0 & s2 & E & F & G) & ~ (s6 & s0 & D & s3 & s5 & s4) & ~ (s6 & s0 & C & s3 & F & G) & ~ (s6 & s0 & C & s2 & E & F) & ~ (s6 & s0 & C & D & s5) & ~ (s6 & s0 & C & D & s3));
  assign aluop3 = ~ (~ (s6 & s0 & D & E & F & G) & ~ (s6 & s0 & C & D & F & s4) & ~ (s6 & s0 & s2 & E & s5) & ~ (s6 & B & s1 & s3 & s5) & ~ (s6 & s0 & C & s2 & s3) & ~ (s6 & B & s1 & s2 & s3) & ~ (s0 & s1 & s2 & E & s5 & G) & ~ (s0 & s1 & s2 & E & F & s4));
  assign aluop4 = ~ (~ (s6 & B & C & s2 & s3 & s5 & G) & ~ (s6 & B & C & s2 & s3 & F & s4) & ~ (A & s0 & s1 & s2 & s3 & s5 & s4) & ~ (s6 & s1 & D & E & s5 & s4) & ~ (s6 & s0 & s1 & E & F & s4) & ~ (s6 & s0 & s1 & s2 & F & s4) & ~ (s6 & s0 & C & D & s3 & G) & ~ (s6 & B & s1 & s2 & E & G) & ~ (s6 & B & s1 & D & s3 & G) & ~ (s6 & s0 & s3 & F & G) & ~ (s6 & s0 & D & s5 & s4) & ~ (s6 & s0 & D & E & s5) & ~ (s6 & s0 & C & E & s5) & ~ (s0 & s1 & s2 & s3 & F & G));
  assign WE = ~ (~ (s6 & D & s3 & F & s4) & ~ (s6 & s1 & E & s5 & s4) & ~ (s6 & s1 & E & F & G) & ~ (s6 & C & s2 & s3 & s4) & ~ (s6 & s1 & D & s3 & s5) & ~ (s6 & C & s2 & s3 & F) & ~ (s6 & s0 & D & s5) & ~ (s6 & s1 & s2 & E) & ~ (s6 & s0 & D & s3) & ~ (s6 & s0 & s1 & D) & ~ (s6 & s0 & C & s2) & ~ (s0 & s1 & D & s3 & s5 & s4) & ~ (s0 & s1 & s2 & G) & ~ (s0 & s1 & s2 & F));
  assign sf = ~ (~ (s6 & s1 & D & s3 & s5 & s4) & ~ (s6 & s0 & s2 & F & s4) & ~ (s6 & s0 & D & F & G) & ~ (s6 & s0 & s1 & F & G) & ~ (s6 & s0 & C & s5) & ~ (s6 & B & s1 & s2) & ~ (s6 & s0 & E) & ~ (s0 & s1 & s2 & E & s5 & G) & ~ (s0 & s1 & s2 & E & F & s4));
  assign alu2D = ~ (~ (s6 & C & s2 & s3 & F & G) & ~ (s6 & s1 & D & s3 & s4) & ~ (s6 & s1 & D & s3 & s5) & ~ (s6 & s0 & E & s5) & ~ (s6 & s0 & s2 & F) & ~ (s6 & s0 & s1 & F) & ~ (s6 & s1 & s2 & E) & ~ (s6 & s0 & C & s3) & ~ (s0 & s1 & s2 & E & s5 & G) & ~ (s0 & s1 & s2 & E & F & s4));
  assign iem0 = ~ (~ (s6 & s0 & C & s2 & s3 & s5 & G) & ~ (A & s0 & s1 & s2 & s3 & s5 & G) & ~ (A & s0 & s1 & s2 & E & F & s4) & ~ (s6 & C & D & E & s5 & s4) & ~ (s6 & s0 & C & D & s5 & s4) & ~ (s6 & B & C & D & F & s4) & ~ (s6 & s0 & C & s2 & E & s4) & ~ (s6 & B & s1 & s2 & s3 & s4) & ~ (s6 & s1 & D & E & G) & ~ (s6 & s0 & s1 & D & G));
  assign iem1 = ~ (~ (s6 & B & s1 & D & E & s5 & G) & ~ (s6 & B & C & D & E & F & s4));
  assign br0 = ~ (~ (s6 & B & C & s2 & E & F & G) & ~ (s6 & B & C & D & s5 & G) & ~ (s6 & B & C & D & s3 & s5));
  assign br1 = ~ (~ (s6 & B & C & s2 & E & s5 & G) & ~ (s6 & B & C & s2 & E & F & s4) & ~ (s6 & B & C & D & s3 & s5));
  assign br2 = ~ (~ (s6 & B & C & D & s3 & s5 & G) & ~ (s6 & B & C & s2 & E & s4) & ~ (s6 & B & C & s2 & E & F));
  assign muxA = ~ (~ (s6 & B & s1 & D & E & s5 & s4) & ~ (s6 & B & C & s2 & s3 & F & s4) & ~ (A & s0 & s1 & s2 & s3 & G) & ~ (A & s0 & s1 & s2 & s3 & F));
  assign ld = ~ (~ (s6 & B & s1 & D & E & s5 & s4) & ~ (s6 & B & s1 & D & E & F & G) & ~ (s6 & B & C & s2 & s3 & s4));
  assign st = ~ (~ (s6 & B & s1 & D & s3 & F & G) & ~ (s6 & B & s1 & D & E & s5 & G) & ~ (s6 & B & s1 & D & E & F & s4) & ~ (s6 & B & C & s2 & s3 & s5 & G));
  assign abs = ~ (~ (s6 & B & C & D & E & s5 & s4) & ~ (A & s0 & s1 & s2 & E & s5 & s4) & ~ (s6 & B & C & D & s3 & F));
  assign ioW = ~ (~ (A & s0 & s1 & s2 & s3 & s5 & s4) & ~ (s6 & B & C & D & E & F));
  assign ioR = ~ (~ (A & s0 & s1 & s2 & s3 & G) & ~ (A & s0 & s1 & s2 & s3 & F));
  assign stPC = (s6 & B & C & D & s3 & F & s4);
  assign Reti = (A & s0 & s1 & s2 & E & s5 & s4);
  assign randomSel = (A & s0 & s1 & s2 & E & F & G);
  assign timerSel = (A & s0 & s1 & D & s3 & s5 & s4);
endmodule

module Mux_4x1
(
    input [1:0] sel,
    input in_0,
    input in_1,
    input in_2,
    input in_3,
    output reg out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


// Register for storing large constants.
// There is a 1-bit command describing this register. 
// In this way, 15 bits can be stored (the 16th bit 
// activates the writing of this register and therefore 
// is always one). The 16th bit will be set according 
// to the 'immediate extend mode' (iem).
module ImReg (
  input en, // enables storage
  input [1:0] iem, // immediate extend mode (0: sign extend; 1: extend with 0, 2:extend with S0, 3:extend with D0)
  input C,
  input [15:0] inst, // the current instruction
  output [15:0] imm // The constant of register contents and bit 8.

);
  wire [14:0] s0;
  wire [14:0] s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  assign s2 = inst[0];
  assign s3 = inst[4];
  assign s0 = inst[14:0];
  // imm
  DIG_Register_BUS #(
    .Bits(15)
  )
  DIG_Register_BUS_i0 (
    .D( s0 ),
    .C( C ),
    .en( en ),
    .Q( s1 )
  );
  assign s5 = s1[14];
  Mux_4x1 Mux_4x1_i1 (
    .sel( iem ),
    .in_0( s5 ),
    .in_1( 1'b0 ),
    .in_2( s2 ),
    .in_3( s3 ),
    .out( s4 )
  );
  assign imm[14:0] = s1;
  assign imm[15] = s4;
endmodule

module DIG_Neg #(
    parameter Bits = 1
)
(
      input signed [(Bits-1):0] in,
      output signed [(Bits-1):0] out
);
    assign out = -in;
endmodule

module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module DIG_Sub #(
    parameter Bits = 2
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits-1):0] s,
    output c_o
);
    wire [Bits:0] temp;

    assign temp = a - b - c_i;
    assign s = temp[(Bits-1):0];
    assign c_o = temp[Bits];
endmodule


module DIG_Mul_unsigned #(
    parameter Bits = 1
)
(
    
      input [(Bits-1):0] a,
      input [(Bits-1):0] b,
      output [(Bits*2-1):0] mul
    
);
    assign mul = a * b;
endmodule


module Mux_16x1
(
    input [3:0] sel,
    input in_0,
    input in_1,
    input in_2,
    input in_3,
    input in_4,
    input in_5,
    input in_6,
    input in_7,
    input in_8,
    input in_9,
    input in_10,
    input in_11,
    input in_12,
    input in_13,
    input in_14,
    input in_15,
    output reg out
);
    always @ (*) begin
        case (sel)
            4'h0: out = in_0;
            4'h1: out = in_1;
            4'h2: out = in_2;
            4'h3: out = in_3;
            4'h4: out = in_4;
            4'h5: out = in_5;
            4'h6: out = in_6;
            4'h7: out = in_7;
            4'h8: out = in_8;
            4'h9: out = in_9;
            4'ha: out = in_10;
            4'hb: out = in_11;
            4'hc: out = in_12;
            4'hd: out = in_13;
            4'he: out = in_14;
            4'hf: out = in_15;
            default:
                out = 'h0;
        endcase
    end
endmodule


module tt_um_smallcpu (
  input [7:0] ui_in,
  input [7:0] uio_in,
  input ena,
  input clk,
  input rst_n,
  output [7:0] uo_out,
  output [7:0] uio_out,
  output [7:0] uio_oe
);
  wire muxA;
  wire [15:0] s0;
  wire [15:0] DataOut;
  wire [15:0] s1;
  wire [2:0] muxB;
  wire [15:0] s2;
  wire [15:0] s3;
  wire [15:0] s4;
  wire [15:0] s5;
  wire [15:0] s6;
  wire [15:0] s7;
  wire [3:0] s8;
  wire [3:0] s9;
  wire [7:0] OPcode;
  wire [2:0] s10;
  wire [15:0] AddrOut;
  wire [15:0] din_bus;
  wire [15:0] iow_Din;
  wire [15:0] s11;
  wire [15:0] timer_in;
  wire [15:0] RandomNUM;
  wire [15:0] s12;
  wire [1:0] s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire [2:0] br;
  wire WE;
  wire pcClock;
  wire rst;
  wire imm;
  wire [1:0] iem;
  wire [3:0] sel;
  wire [15:0] s19;
  wire [15:0] s20;
  wire [15:0] s21;
  wire [15:0] s22;
  wire [15:0] s23;
  wire [15:0] s24;
  wire [15:0] s25;
  wire [15:0] s26;
  wire [15:0] s27;
  wire [15:0] s28;
  wire [15:0] s29;
  wire [15:0] s30;
  wire [15:0] s31;
  wire s32;
  wire s33;
  wire s34;
  wire s35;
  wire s36;
  wire s37;
  wire [4:0] aluOp;
  wire s38;
  wire s39;
  wire s40;
  wire s41;
  wire s42;
  wire s43;
  wire s44;
  wire s45;
  wire [15:0] s46;
  wire [15:0] s47;
  wire s48;
  wire ioW;
  wire s49;
  wire s50;
  wire s51;
  wire s52;
  wire s53;
  wire s54;
  wire s55;
  wire s56;
  wire s57;
  wire s58;
  wire s59;
  wire s60;
  wire s61;
  wire s62;
  wire s63;
  wire s64;
  wire s65;
  wire s66;
  wire s67;
  wire s68;
  wire s69;
  wire s70;
  wire s71;
  wire s72;
  wire s73;
  wire s74;
  wire s75;
  wire s76;
  wire s77;
  wire s78;
  wire s79;
  wire s80;
  wire s81;
  wire s82;
  wire s83;
  wire stPC;
  wire ld;
  wire RandomNUMSel;
  wire ioR;
  wire [6:0] s84;
  wire [6:0] s85;
  wire s86;
  wire s87;
  wire s88;
  wire s89;
  wire s90;
  wire s91;
  wire s92;
  wire s93;
  wire s94;
  wire s95;
  wire s96;
  wire s97;
  wire s98;
  wire s99;
  wire s100;
  wire sf;
  wire s101;
  wire s102;
  wire s103;
  wire s104;
  wire s105;
  wire st;
  wire abs;
  wire Reti;
  wire timer_Sel;
  wire InterLock;
  wire s106;
  wire intr;
  wire s107;
  wire s108;
  wire s109;
  wire s110;
  wire inter;
  wire interEnable;
  wire s111;
  wire [15:0] s112;
  wire s113;
  wire s114;
  wire s115;
  wire s116;
  wire [31:0] s117;
  wire spi_miso;
  wire [15:0] s118;
  wire s119;
  wire s120;
  wire s121;
  wire spi_busy_ram;
  wire s122;
  wire s123;
  wire [7:0] s124;
  wire s125;
  wire s126;
  wire [7:0] s127;
  wire intsin;
  wire spi_clock_ram;
  wire spi_mosi_ram;
  wire s128;
  wire s129;
  wire s130;
  wire [15:0] s131;
  wire pcShift;
  wire s132;
  wire s133;
  wire s134;
  wire s135;
  wire s136;
  wire s137;
  wire s138;
  wire s139;
  assign iow_Din[0] = uio_in[0];
  assign iow_Din[1] = uio_in[1];
  assign iow_Din[2] = uio_in[2];
  assign iow_Din[3] = uio_in[3];
  assign iow_Din[4] = uio_in[4];
  assign iow_Din[5] = uio_in[5];
  assign iow_Din[6] = uio_in[6];
  assign iow_Din[7] = uio_in[7];
  assign iow_Din[8] = ui_in[0];
  assign iow_Din[9] = ui_in[1];
  assign iow_Din[10] = ui_in[2];
  assign iow_Din[11] = ui_in[3];
  assign iow_Din[12] = ui_in[4];
  assign iow_Din[13] = ui_in[5];
  assign iow_Din[14] = ui_in[6];
  assign iow_Din[15] = ui_in[7];
  assign s108 = ~ clk;
  assign s110 = ~ clk;
  assign s130 = ~ rst_n;
  assign rst = ~ rst_n;
  assign spi_miso = ui_in[0];
  assign intsin = ui_in[1];
  Mux_8x1_NBits #(
    .Bits(16)
  )
  Mux_8x1_NBits_i0 (
    .sel( s10 ),
    .in_0( AddrOut ),
    .in_1( din_bus ),
    .in_2( iow_Din ),
    .in_3( s11 ),
    .in_4( timer_in ),
    .in_5( RandomNUM ),
    .in_6( 16'b0 ),
    .in_7( 16'b0 ),
    .out( s12 )
  );
  RegisterBlock RegisterBlock_i1 (
    .DataIn( s12 ),
    .WE( WE ),
    .clk( pcClock ),
    .src( s8 ),
    .Dest( s9 ),
    .rst( rst ),
    .RDest( s0 ),
    .Rsrc( DataOut )
  );
  // *
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i2 (
    .D( s107 ),
    .C( s108 ),
    .Q( InterLock )
  );
  // *
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i3 (
    .D( s109 ),
    .C( s110 ),
    .Q( s106 )
  );
  // SpiRam
  spiden spiden_i4 (
    .spi_miso( spi_miso ),
    .Address( s118 ),
    .clk( clk ),
    .st( st ),
    .DataIn( DataOut ),
    .ld( ld ),
    .spi_rst( s119 ),
    .spi_clk( s120 ),
    .spi_mosi( s121 ),
    .Busy( spi_busy_ram ),
    .data_out( din_bus )
  );
  timer timer_i5 (
    .dOut( DataOut ),
    .Addr( AddrOut ),
    .ioW( ioW ),
    .ioR( ioR ),
    .C( clk ),
    .InterLock( InterLock ),
    .timerConfigAddr( 16'b1 ),
    .timerTargetAddr( 16'b10 ),
    .timerResetAddr( 16'b11 ),
    .timerReadAddr( 16'b1 ),
    .rst( rst ),
    .TimerOut( timer_in ),
    .\timer?nterrupt ( inter )
  );
  // OpCode
  OpCode OpCode_i6 (
    .clk( s129 ),
    .rst( s130 ),
    .instructionInput( intsin ),
    .ProgramCounter( s131 ),
    .opcoder( s7 ),
    .PcClock( pcClock ),
    .PcShifter( pcShift )
  );
  // Neg
  register_1bit register_1bit_i7 (
    .D( s40 ),
    .C( clk ),
    .en( sf ),
    .rst( rst ),
    .Q( s16 )
  );
  // Zero
  register_1bit register_1bit_i8 (
    .D( s39 ),
    .C( clk ),
    .en( sf ),
    .rst( rst ),
    .Q( s15 )
  );
  // Carry
  register_1bit register_1bit_i9 (
    .D( s37 ),
    .C( clk ),
    .en( sf ),
    .rst( rst ),
    .Q( s14 )
  );
  // outputReg
  register_8bit register_8bit_i10 (
    .D( s127 ),
    .C( clk ),
    .en( s126 ),
    .rst( rst ),
    .Q( uio_oe )
  );
  // OutoutEnReg
  register_8bit register_8bit_i11 (
    .D( s124 ),
    .C( clk ),
    .en( s123 ),
    .rst( rst ),
    .Q( uio_out )
  );
  // programCounter
  programCounter programCounter_i12 (
    .AluIn( AddrOut ),
    .clk( pcClock ),
    .rst( rst ),
    .absJmp( abs ),
    .intr( s114 ),
    .reti( s115 ),
    .relJmp( s18 ),
    .Nextpc( s11 ),
    .PC( s131 )
  );
  singExtend singExtend_i13 (
    .inst( s7 ),
    .\4S ( s3 ),
    .\8SD ( s4 ),
    .\4D ( s5 )
  );
  Driver Driver_i14 (
    .in( s120 ),
    .sel( spi_busy_ram ),
    .out( spi_clock_ram )
  );
  Driver Driver_i15 (
    .in( s121 ),
    .sel( spi_busy_ram ),
    .out( spi_mosi_ram )
  );
  Mux_2x1 Mux_2x1_i16 (
    .sel( spi_busy_ram ),
    .in_0( clk ),
    .in_1( 1'b1 ),
    .out( s129 )
  );
  assign s8 = s7[3:0];
  assign s9 = s7[7:4];
  assign OPcode = s7[15:8];
  assign s124 = DataOut[7:0];
  assign s127 = DataOut[7:0];
  CompUnsigned #(
    .Bits(8)
  )
  CompUnsigned_i17 (
    .a( OPcode ),
    .b( 8'b101100 ),
    .\= ( s132 )
  );
  CompUnsigned #(
    .Bits(8)
  )
  CompUnsigned_i18 (
    .a( OPcode ),
    .b( 8'b110000 ),
    .\= ( s133 )
  );
  CompUnsigned #(
    .Bits(8)
  )
  CompUnsigned_i19 (
    .a( OPcode ),
    .b( 8'b101111 ),
    .\= ( s134 )
  );
  CompUnsigned #(
    .Bits(8)
  )
  CompUnsigned_i20 (
    .a( OPcode ),
    .b( 8'b110010 ),
    .\= ( s135 )
  );
  CompUnsigned #(
    .Bits(8)
  )
  CompUnsigned_i21 (
    .a( OPcode ),
    .b( 8'b101110 ),
    .\= ( s136 )
  );
  CompUnsigned #(
    .Bits(8)
  )
  CompUnsigned_i22 (
    .a( OPcode ),
    .b( 8'b101101 ),
    .\= ( s137 )
  );
  CompUnsigned #(
    .Bits(8)
  )
  CompUnsigned_i23 (
    .a( OPcode ),
    .b( 8'b101011 ),
    .\= ( s138 )
  );
  CompUnsigned #(
    .Bits(8)
  )
  CompUnsigned_i24 (
    .a( OPcode ),
    .b( 8'b110001 ),
    .\= ( s139 )
  );
  assign uo_out[0] = spi_clock_ram;
  assign uo_out[1] = spi_mosi_ram;
  assign uo_out[2] = spi_busy_ram;
  assign uo_out[3] = pcShift;
  assign uo_out[4] = 1'b0;
  assign uo_out[5] = 1'b0;
  assign uo_out[6] = 1'b0;
  assign uo_out[7] = 1'b0;
  assign s84 = OPcode[6:0];
  assign imm = OPcode[7];
  Mux_2x1_NBits #(
    .Bits(7)
  )
  Mux_2x1_NBits_i25 (
    .sel( imm ),
    .in_0( s84 ),
    .in_1( 7'b0 ),
    .out( s85 )
  );
  assign intr = (~ InterLock & ~ imm & s106 & ~ 1'b0);
  assign s119 = ~ ((s136 | s137 | s138 | s139) | (s132 | s133 | s134 | s135));
  assign s92 = s85[0];
  assign s91 = s85[1];
  assign s90 = s85[2];
  assign s89 = s85[3];
  assign s88 = s85[4];
  assign s87 = s85[5];
  assign s86 = s85[6];
  controllogic controllogic_i26 (
    .A( s86 ),
    .B( s87 ),
    .C( s88 ),
    .D( s89 ),
    .E( s90 ),
    .F( s91 ),
    .G( s92 ),
    .muxb0( s93 ),
    .muxb1( s94 ),
    .muxb2( s95 ),
    .aluop0( s96 ),
    .aluop1( s97 ),
    .aluop2( s98 ),
    .aluop3( s99 ),
    .aluop4( s100 ),
    .WE( WE ),
    .sf( sf ),
    .iem0( s101 ),
    .iem1( s102 ),
    .br0( s103 ),
    .br1( s104 ),
    .br2( s105 ),
    .muxA( muxA ),
    .ld( ld ),
    .st( st ),
    .abs( abs ),
    .ioW( ioW ),
    .ioR( ioR ),
    .stPC( stPC ),
    .Reti( Reti ),
    .randomSel( RandomNUMSel ),
    .timerSel( timer_Sel )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i27 (
    .sel( muxA ),
    .in_0( s0 ),
    .in_1( DataOut ),
    .out( s1 )
  );
  assign s10[0] = (stPC | ld | RandomNUMSel);
  assign s10[1] = (ioR | stPC);
  assign s10[2] = (timer_Sel | RandomNUMSel);
  assign muxB[0] = s95;
  assign muxB[1] = s94;
  assign muxB[2] = s93;
  assign aluOp[0] = s100;
  assign aluOp[1] = s99;
  assign aluOp[2] = s98;
  assign aluOp[3] = s97;
  assign aluOp[4] = s96;
  assign br[0] = s105;
  assign br[1] = s104;
  assign br[2] = s103;
  assign iem[0] = s102;
  assign iem[1] = s101;
  assign s107 = ((InterLock & ~ Reti) | intr);
  ImReg ImReg_i28 (
    .en( imm ),
    .iem( iem ),
    .C( pcClock ),
    .inst( s7 ),
    .imm( s2 )
  );
  assign s38 = (aluOp[4] & s14);
  assign s24 = ~ s1;
  DIG_Neg #(
    .Bits(16)
  )
  DIG_Neg_i29 (
    .in( s1 ),
    .out( s25 )
  );
  assign s30[3:0] = s1[7:4];
  assign s30[7:4] = s1[3:0];
  assign s30[11:8] = s1[15:12];
  assign s30[15:12] = s1[11:8];
  assign s29[7:0] = s1[15:8];
  assign s29[15:8] = s1[7:0];
  assign s13 = br[1:0];
  assign sel = aluOp[3:0];
  assign s36 = s1[0];
  assign s116 = s1[15];
  assign s35 = s1[0];
  assign s34 = s1[15];
  Mux_8x1_NBits #(
    .Bits(16)
  )
  Mux_8x1_NBits_i30 (
    .sel( muxB ),
    .in_0( DataOut ),
    .in_1( 16'b0 ),
    .in_2( s2 ),
    .in_3( 16'b0 ),
    .in_4( 16'b0 ),
    .in_5( s3 ),
    .in_6( s4 ),
    .in_7( s5 ),
    .out( s6 )
  );
  Mux_4x1 Mux_4x1_i31 (
    .sel( s13 ),
    .in_0( 1'b0 ),
    .in_1( s14 ),
    .in_2( s15 ),
    .in_3( s16 ),
    .out( s17 )
  );
  assign s28[13:0] = s1[14:1];
  assign s28[14] = s116;
  assign s28[15] = s116;
  assign s27[14:0] = s1[15:1];
  assign s27[15] = s38;
  assign s26[0] = s38;
  assign s26[15:1] = s1[14:0];
  assign s18 = (s17 ^ br[2]);
  assign s21 = (s1 & s6);
  assign s22 = (s1 | s6);
  assign s23 = (s1 ^ s6);
  DIG_Add #(
    .Bits(16)
  )
  DIG_Add_i32 (
    .a( s1 ),
    .b( s6 ),
    .c_i( s38 ),
    .s( s19 ),
    .c_o( s32 )
  );
  DIG_Sub #(
    .Bits(16)
  )
  DIG_Sub_i33 (
    .a( s1 ),
    .b( s6 ),
    .c_i( s38 ),
    .s( s20 ),
    .c_o( s33 )
  );
  DIG_Mul_unsigned #(
    .Bits(16)
  )
  DIG_Mul_unsigned_i34 (
    .a( s1 ),
    .b( s6 ),
    .mul( s117 )
  );
  Mux_16x1 Mux_16x1_i35 (
    .sel( sel ),
    .in_0( 1'b0 ),
    .in_1( s32 ),
    .in_2( s33 ),
    .in_3( 1'b0 ),
    .in_4( 1'b0 ),
    .in_5( 1'b0 ),
    .in_6( 1'b0 ),
    .in_7( 1'b0 ),
    .in_8( s34 ),
    .in_9( s35 ),
    .in_10( s36 ),
    .in_11( 1'b0 ),
    .in_12( 1'b0 ),
    .in_13( 1'b0 ),
    .in_14( 1'b0 ),
    .in_15( 1'b0 ),
    .out( s37 )
  );
  assign s31 = s117[15:0];
  Mux_16x1_NBits #(
    .Bits(16)
  )
  Mux_16x1_NBits_i36 (
    .sel( sel ),
    .in_0( s6 ),
    .in_1( s19 ),
    .in_2( s20 ),
    .in_3( s21 ),
    .in_4( s22 ),
    .in_5( s23 ),
    .in_6( s24 ),
    .in_7( s25 ),
    .in_8( s26 ),
    .in_9( s27 ),
    .in_10( s28 ),
    .in_11( s29 ),
    .in_12( s30 ),
    .in_13( s31 ),
    .in_14( 16'b0 ),
    .in_15( 16'b0 ),
    .out( AddrOut )
  );
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i37 (
    .a( AddrOut ),
    .b( 16'b0 ),
    .\= ( s39 )
  );
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i38 (
    .a( AddrOut ),
    .b( 16'b1001 ),
    .\= ( s48 )
  );
  CompUnsigned #(
    .Bits(16)
  )
  CompUnsigned_i39 (
    .a( AddrOut ),
    .b( 16'b110 ),
    .\= ( s113 )
  );
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i40 (
    .a( AddrOut ),
    .b( 16'b111 ),
    .\= ( s122 )
  );
  CompSigned #(
    .Bits(16)
  )
  CompSigned_i41 (
    .a( AddrOut ),
    .b( 16'b1000 ),
    .\= ( s125 )
  );
  assign s118[0] = 1'b0;
  assign s118[15:1] = AddrOut[14:0];
  assign s40 = AddrOut[15];
  assign s128 = AddrOut[15];
  assign s45 = (s48 & ioW);
  assign s111 = (s113 & ioW);
  assign s123 = (s122 & ioW);
  assign s126 = (s125 & ioW);
  // seed
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i42 (
    .D( DataOut ),
    .C( clk ),
    .en( s45 ),
    .Q( s46 )
  );
  assign s42 = (clk & s45);
  // intEn
  DIG_Register_BUS #(
    .Bits(16)
  )
  DIG_Register_BUS_i43 (
    .D( DataOut ),
    .C( clk ),
    .en( s111 ),
    .Q( s112 )
  );
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i44 (
    .sel( s45 ),
    .in_0( 16'b0 ),
    .in_1( s46 ),
    .out( s47 )
  );
  assign interEnable = s112[0];
  assign s109 = ((s106 & ~ Reti) | (inter & interEnable));
  assign s114 = (intr & interEnable);
  assign s115 = (interEnable & Reti);
  assign s51 = s47[0];
  assign s54 = s47[1];
  assign s56 = s47[2];
  assign s58 = s47[3];
  assign s60 = s47[4];
  assign s62 = s47[5];
  assign s64 = s47[6];
  assign s66 = s47[7];
  assign s68 = s47[8];
  assign s70 = s47[9];
  assign s72 = s47[10];
  assign s74 = s47[11];
  assign s76 = s47[12];
  assign s78 = s47[13];
  assign s80 = s47[14];
  assign s82 = s47[15];
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i45 (
    .Set( 1'b0 ),
    .D( s41 ),
    .C( s42 ),
    .Clr( s43 ),
    .Q( s44 ),
    .\~Q ( s41 )
  );
  assign s50 = (s45 & ~ s49);
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i46 (
    .Set( s51 ),
    .D( s52 ),
    .C( clk ),
    .Clr( s50 ),
    .Q( s53 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i47 (
    .Set( s54 ),
    .D( s53 ),
    .C( clk ),
    .Clr( s50 ),
    .Q( s55 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i48 (
    .Set( s56 ),
    .D( s55 ),
    .C( clk ),
    .Clr( s50 ),
    .Q( s57 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i49 (
    .Set( s58 ),
    .D( s57 ),
    .C( clk ),
    .Clr( s50 ),
    .Q( s59 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i50 (
    .Set( s60 ),
    .D( s59 ),
    .C( clk ),
    .Clr( s50 ),
    .Q( s61 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i51 (
    .Set( s62 ),
    .D( s61 ),
    .C( clk ),
    .Clr( s50 ),
    .Q( s63 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i52 (
    .Set( s64 ),
    .D( s63 ),
    .C( clk ),
    .Clr( s50 ),
    .Q( s65 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i53 (
    .Set( s66 ),
    .D( s65 ),
    .C( clk ),
    .Clr( s50 ),
    .Q( s67 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i54 (
    .Set( s68 ),
    .D( s67 ),
    .C( clk ),
    .Clr( s50 ),
    .Q( s69 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i55 (
    .Set( s70 ),
    .D( s69 ),
    .C( clk ),
    .Clr( s50 ),
    .Q( s71 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i56 (
    .Set( s72 ),
    .D( s71 ),
    .C( clk ),
    .Clr( s50 ),
    .Q( s73 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i57 (
    .Set( s74 ),
    .D( s73 ),
    .C( clk ),
    .Clr( s50 ),
    .Q( s75 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i58 (
    .Set( s76 ),
    .D( s75 ),
    .C( clk ),
    .Clr( s50 ),
    .Q( s77 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i59 (
    .Set( s78 ),
    .D( s77 ),
    .C( clk ),
    .Clr( s50 ),
    .Q( s79 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i60 (
    .Set( s80 ),
    .D( s79 ),
    .C( clk ),
    .Clr( s50 ),
    .Q( s81 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i61 (
    .Set( s82 ),
    .D( s81 ),
    .C( clk ),
    .Clr( s50 ),
    .Q( s83 )
  );
  assign s52 = (s63 ^ (s73 ^ (s77 ^ s81)));
  assign RandomNUM[0] = s53;
  assign RandomNUM[1] = s55;
  assign RandomNUM[2] = s57;
  assign RandomNUM[3] = s59;
  assign RandomNUM[4] = s61;
  assign RandomNUM[5] = s63;
  assign RandomNUM[6] = s65;
  assign RandomNUM[7] = s67;
  assign RandomNUM[8] = s69;
  assign RandomNUM[9] = s71;
  assign RandomNUM[10] = s73;
  assign RandomNUM[11] = s75;
  assign RandomNUM[12] = s77;
  assign RandomNUM[13] = s79;
  assign RandomNUM[14] = s81;
  assign RandomNUM[15] = s83;
  assign s49 = (s44 | s43);
  DIG_JK_FF #(
    .Default(0)
  )
  DIG_JK_FF_i62 (
    .J( s49 ),
    .C( clk ),
    .K( s49 ),
    .Q( s43 )
  );
endmodule
